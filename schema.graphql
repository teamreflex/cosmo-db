type Collection @entity {
  id: ID! @index # uuid
  contract: String! @index
  createdAt: DateTime!
  slug: String! @index @unique
  # objekt fields
  collectionId: String! @index @unique
  season: String! @index
  member: String! @index
  artist: String! @index
  collectionNo: String! @index
  class: String! @index
  thumbnailImage: String!
  frontImage: String!
  backImage: String!
  backgroundColor: String!
  textColor: String!
  accentColor: String!
  comoAmount: Int!
  onOffline: String! @index
  transfers: [Transfer!] @derivedFrom(field: "collection")
  objekts: [Objekt!] @derivedFrom(field: "collection")
}

type Transfer @entity {
  id: ID! @index # uuid
  from: String! @index
  to: String! @index
  timestamp: DateTime!
  tokenId: String!
  objekt: Objekt!
  collection: Collection!
}

type Objekt @entity {
  id: ID! @index # tokenId
  owner: String! @index
  mintedAt: DateTime!
  receivedAt: DateTime!
  serial: Int!
  transferable: Boolean!
  transfers: [Transfer!] @derivedFrom(field: "objekt")
  collection: Collection!
}
